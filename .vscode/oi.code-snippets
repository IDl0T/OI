{
	// Place your OI workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"OI template": {
		"prefix": "head",
		"body": [
			"#include <iostream>",
			"#include <algorithm>",
			"#include <vector>",
			"using namespace std;",
			"using ll = long long;",
			"using pii = pair<int, int>;",
			"",
			"int N;",
			"",
			"int main() {",
			"    $0",
			"}"
		]
	},
	"Binary Indexed Tree": {
		"prefix": "BIT",
		"body": [
			"struct BIT {",
			"    int data[MAXN];",
			"    inline int lowbit(int x) {",
			"        return x & -x;",
			"    }",
			"    int query(int x) {",
			"        int out = 0;",
			"        while (x > 0) {",
			"            out += data[x];",
			"            x -= lowbit(x);",
			"        }",
			"        return out;",
			"    }",
			"    void add(int x, int k) {",
			"        while (x <= N) {",
			"            data[x] += k;",
			"            x += lowbit(x);",
			"        }",
			"    }",
			"};",
		]
	}
}